//1:Dataflow model
module full_adder_d (
input a,b,cin,
output sum,cout
);
assign sum = a ^ b ^ cin;
assign cout = (a & b) | (b & cin) | (a & cin);
endmodule


//2: Structural Model
// Half Adder Module
module half_add (
    input  a, b,     // Inputs
    output s, c      // Sum and Carry outputs
);

    // Gate level implementation of half adder
    xor x1(s, a, b); // XOR gate for sum
    and a1(c, a, b); // AND gate for carry

endmodule : half_add

// Full Adder Module
module full_add (
    input  a, b, cin,  // Inputs
    output sum, cout    // Sum and Carry outputs
);

    // Internal wires
    wire x, y, z;
    
    // Instantiate half adder modules
    half_add h1 (
        .a(a), 
        .b(b), 
        .s(x), 
        .c(y)
    );
    
    half_add h2 (
        .a(x), 
        .b(cin), 
        .s(sum), 
        .c(z)
    );
    
    // OR gate for final carry out
    or o1(cout, y, z);

endmodule : full_add





//1: Dataflow Model Testbench
module full_adder_d_tb;
    reg a, b, cin;      // Input signals for full adder
    wire sum, cout;     // Output signals for full adder

    // Instantiate the Full Adder (Dataflow) module
    full_adder_d uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    // Test Vectors
    initial begin
        // Set up the VCD file for waveform generation
        $dumpfile("full_adder_d_dump.vcd");    // Specify the VCD file name
        $dumpvars(0, full_adder_d_tb);         // Dump variables for this module

        // Display the output
        $monitor("a = %b, b = %b, cin = %b, Sum = %b, Carry Out = %b", a, b, cin, sum, cout);
        
        // Apply Test Cases
        a = 0; b = 0; cin = 0; #10;  // Test Case 1: 0 + 0 + 0
        a = 0; b = 0; cin = 1; #10;  // Test Case 2: 0 + 0 + 1
        a = 0; b = 1; cin = 0; #10;  // Test Case 3: 0 + 1 + 0
        a = 0; b = 1; cin = 1; #10;  // Test Case 4: 0 + 1 + 1
        a = 1; b = 0; cin = 0; #10;  // Test Case 5: 1 + 0 + 0
        a = 1; b = 0; cin = 1; #10;  // Test Case 6: 1 + 0 + 1
        a = 1; b = 1; cin = 0; #10;  // Test Case 7: 1 + 1 + 0
        a = 1; b = 1; cin = 1; #10;  // Test Case 8: 1 + 1 + 1
        
        $finish;  // End the simulation
    end
endmodule


//2: Dataflow tb
module full_add_tb;
    reg a, b, cin;      // Input signals for full adder
    wire sum, cout;     // Output signals for full adder

    // Instantiate the Full Adder module
    full_add uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    // Test Vectors
    initial begin
        

        // Display the output
        $monitor("a = %b, b = %b, cin = %b, Sum = %b, Carry Out = %b", a, b, cin, sum, cout);
        
        // Apply Test Cases
        a = 0; b = 0; cin = 0; #10;  // Test Case 1: 0 + 0 + 0
        a = 0; b = 0; cin = 1; #10;  // Test Case 2: 0 + 0 + 1
        a = 0; b = 1; cin = 0; #10;  // Test Case 3: 0 + 1 + 0
        a = 0; b = 1; cin = 1; #10;  // Test Case 4: 0 + 1 + 1
        a = 1; b = 0; cin = 0; #10;  // Test Case 5: 1 + 0 + 0
        a = 1; b = 0; cin = 1; #10;  // Test Case 6: 1 + 0 + 1
        a = 1; b = 1; cin = 0; #10;  // Test Case 7: 1 + 1 + 0
        a = 1; b = 1; cin = 1; #10;  // Test Case 8: 1 + 1 + 1
        
        $finish;  // End the simulation
    end
endmodule



